using System;
using RestSharp;
using RestSharp.Authenticators;
using RestSharp.Serializers.NewtonsoftJson;
using Newtonsoft.Json;
using Newtonsoft.Json.Serialization;
using vspheresdk.Vcenter.Modules;
using vspheresdk;
using System.Threading;

namespace vspheresdk
{
    public class VcenterSubModule
    {
        JsonSerializerSettings defaultSerializationSettings;
        RestClient restClient;
        private CancellationToken cancellationToken;
        private int timeout;
        private int retry;
        public VcenterSubModule(RestClient RestClient, CancellationToken _cancellationToken = default(CancellationToken), int Port = 443, int _timeout = 5, int _retry = 2)
        {
            cancellationToken = _cancellationToken;
            timeout = _timeout;
            retry = _retry;
            restClient = RestClient;
        }
        public AuthenticationTokenModule AuthenticationTokenModule => new AuthenticationTokenModule(restClient, cancellationToken, timeout, retry);
        public CertificateManagementVcenterSigningCertificateModule CertificateManagementVcenterSigningCertificateModule => new CertificateManagementVcenterSigningCertificateModule(restClient, cancellationToken, timeout, retry);
        public CertificateManagementVcenterTlsModule CertificateManagementVcenterTlsModule => new CertificateManagementVcenterTlsModule(restClient, cancellationToken, timeout, retry);
        public CertificateManagementVcenterTlsCsrModule CertificateManagementVcenterTlsCsrModule => new CertificateManagementVcenterTlsCsrModule(restClient, cancellationToken, timeout, retry);
        public CertificateManagementVcenterTrustedRootChainsModule CertificateManagementVcenterTrustedRootChainsModule => new CertificateManagementVcenterTrustedRootChainsModule(restClient, cancellationToken, timeout, retry);
        public CertificateManagementVcenterVmcaRootModule CertificateManagementVcenterVmcaRootModule => new CertificateManagementVcenterVmcaRootModule(restClient, cancellationToken, timeout, retry);
        public ClusterModule ClusterModule => new ClusterModule(restClient, cancellationToken, timeout, retry);
        public ComputePoliciesModule ComputePoliciesModule => new ComputePoliciesModule(restClient, cancellationToken, timeout, retry);
        public ComputePoliciesCapabilitiesModule ComputePoliciesCapabilitiesModule => new ComputePoliciesCapabilitiesModule(restClient, cancellationToken, timeout, retry);
        public ComputePoliciesTagUsageModule ComputePoliciesTagUsageModule => new ComputePoliciesTagUsageModule(restClient, cancellationToken, timeout, retry);
        public ContentRegistriesHarborModule ContentRegistriesHarborModule => new ContentRegistriesHarborModule(restClient, cancellationToken, timeout, retry);
        public ContentRegistriesHarborProjectsModule ContentRegistriesHarborProjectsModule => new ContentRegistriesHarborProjectsModule(restClient, cancellationToken, timeout, retry);
        public ContentRegistriesHealthModule ContentRegistriesHealthModule => new ContentRegistriesHealthModule(restClient, cancellationToken, timeout, retry);
        public CryptoManagerHostsKmsProvidersModule CryptoManagerHostsKmsProvidersModule => new CryptoManagerHostsKmsProvidersModule(restClient, cancellationToken, timeout, retry);
        public CryptoManagerKmsProvidersModule CryptoManagerKmsProvidersModule => new CryptoManagerKmsProvidersModule(restClient, cancellationToken, timeout, retry);
        public DatacenterModule DatacenterModule => new DatacenterModule(restClient, cancellationToken, timeout, retry);
        public DatastoreModule DatastoreModule => new DatastoreModule(restClient, cancellationToken, timeout, retry);
        public DatastoreDefaultPolicyModule DatastoreDefaultPolicyModule => new DatastoreDefaultPolicyModule(restClient, cancellationToken, timeout, retry);
        public DeploymentModule DeploymentModule => new DeploymentModule(restClient, cancellationToken, timeout, retry);
        public DeploymentImportHistoryModule DeploymentImportHistoryModule => new DeploymentImportHistoryModule(restClient, cancellationToken, timeout, retry);
        public DeploymentInstallModule DeploymentInstallModule => new DeploymentInstallModule(restClient, cancellationToken, timeout, retry);
        public DeploymentInstallInitialConfigRemotePscThumbprintModule DeploymentInstallInitialConfigRemotePscThumbprintModule => new DeploymentInstallInitialConfigRemotePscThumbprintModule(restClient, cancellationToken, timeout, retry);
        public DeploymentInstallPscReplicatedModule DeploymentInstallPscReplicatedModule => new DeploymentInstallPscReplicatedModule(restClient, cancellationToken, timeout, retry);
        public DeploymentInstallPscStandaloneModule DeploymentInstallPscStandaloneModule => new DeploymentInstallPscStandaloneModule(restClient, cancellationToken, timeout, retry);
        public DeploymentInstallRemotePscModule DeploymentInstallRemotePscModule => new DeploymentInstallRemotePscModule(restClient, cancellationToken, timeout, retry);
        public DeploymentMigrateModule DeploymentMigrateModule => new DeploymentMigrateModule(restClient, cancellationToken, timeout, retry);
        public DeploymentMigrateActiveDirectoryModule DeploymentMigrateActiveDirectoryModule => new DeploymentMigrateActiveDirectoryModule(restClient, cancellationToken, timeout, retry);
        public DeploymentQuestionModule DeploymentQuestionModule => new DeploymentQuestionModule(restClient, cancellationToken, timeout, retry);
        public DeploymentUpgradeModule DeploymentUpgradeModule => new DeploymentUpgradeModule(restClient, cancellationToken, timeout, retry);
        public FolderModule FolderModule => new FolderModule(restClient, cancellationToken, timeout, retry);
        public GuestCustomizationSpecsModule GuestCustomizationSpecsModule => new GuestCustomizationSpecsModule(restClient, cancellationToken, timeout, retry);
        public HostModule HostModule => new HostModule(restClient, cancellationToken, timeout, retry);
        public IdentityProvidersModule IdentityProvidersModule => new IdentityProvidersModule(restClient, cancellationToken, timeout, retry);
        public InventoryDatastoreModule InventoryDatastoreModule => new InventoryDatastoreModule(restClient, cancellationToken, timeout, retry);
        public InventoryNetworkModule InventoryNetworkModule => new InventoryNetworkModule(restClient, cancellationToken, timeout, retry);
        public IsoImageModule IsoImageModule => new IsoImageModule(restClient, cancellationToken, timeout, retry);
        public LcmDiscoveryAssociatedProductsModule LcmDiscoveryAssociatedProductsModule => new LcmDiscoveryAssociatedProductsModule(restClient, cancellationToken, timeout, retry);
        public LcmDiscoveryInteropReportModule LcmDiscoveryInteropReportModule => new LcmDiscoveryInteropReportModule(restClient, cancellationToken, timeout, retry);
        public LcmDiscoveryProductCatalogModule LcmDiscoveryProductCatalogModule => new LcmDiscoveryProductCatalogModule(restClient, cancellationToken, timeout, retry);
        public LcmReportsModule LcmReportsModule => new LcmReportsModule(restClient, cancellationToken, timeout, retry);
        public LcmUpdatePendingModule LcmUpdatePendingModule => new LcmUpdatePendingModule(restClient, cancellationToken, timeout, retry);
        public LcmUpdatePrecheckReportModule LcmUpdatePrecheckReportModule => new LcmUpdatePrecheckReportModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementHostsConfigModule NamespaceManagementHostsConfigModule => new NamespaceManagementHostsConfigModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementClusterCompatibilityModule NamespaceManagementClusterCompatibilityModule => new NamespaceManagementClusterCompatibilityModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementClusterSizeInfoModule NamespaceManagementClusterSizeInfoModule => new NamespaceManagementClusterSizeInfoModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementClustersModule NamespaceManagementClustersModule => new NamespaceManagementClustersModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementLoadBalancersModule NamespaceManagementLoadBalancersModule => new NamespaceManagementLoadBalancersModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementNetworksModule NamespaceManagementNetworksModule => new NamespaceManagementNetworksModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementSupervisorServicesClusterSupervisorServicesModule NamespaceManagementSupervisorServicesClusterSupervisorServicesModule => new NamespaceManagementSupervisorServicesClusterSupervisorServicesModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementSupportBundleModule NamespaceManagementSupportBundleModule => new NamespaceManagementSupportBundleModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementNamespaceResourceOptionsModule NamespaceManagementNamespaceResourceOptionsModule => new NamespaceManagementNamespaceResourceOptionsModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementDistributedSwitchCompatibilityModule NamespaceManagementDistributedSwitchCompatibilityModule => new NamespaceManagementDistributedSwitchCompatibilityModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementEdgeClusterCompatibilityModule NamespaceManagementEdgeClusterCompatibilityModule => new NamespaceManagementEdgeClusterCompatibilityModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementNSXTier0GatewayModule NamespaceManagementNSXTier0GatewayModule => new NamespaceManagementNSXTier0GatewayModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementClusterAvailableVersionsModule NamespaceManagementClusterAvailableVersionsModule => new NamespaceManagementClusterAvailableVersionsModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementSoftwareClustersModule NamespaceManagementSoftwareClustersModule => new NamespaceManagementSoftwareClustersModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementStatsTimeSeriesModule NamespaceManagementStatsTimeSeriesModule => new NamespaceManagementStatsTimeSeriesModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementSupervisorServicesModule NamespaceManagementSupervisorServicesModule => new NamespaceManagementSupervisorServicesModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementSupervisorServicesVersionsModule NamespaceManagementSupervisorServicesVersionsModule => new NamespaceManagementSupervisorServicesVersionsModule(restClient, cancellationToken, timeout, retry);
        public NamespaceManagementVirtualMachineClassesModule NamespaceManagementVirtualMachineClassesModule => new NamespaceManagementVirtualMachineClassesModule(restClient, cancellationToken, timeout, retry);
        public NamespacesUserInstancesModule NamespacesUserInstancesModule => new NamespacesUserInstancesModule(restClient, cancellationToken, timeout, retry);
        public NamespacesInstancesModule NamespacesInstancesModule => new NamespacesInstancesModule(restClient, cancellationToken, timeout, retry);
        public NamespacesAccessModule NamespacesAccessModule => new NamespacesAccessModule(restClient, cancellationToken, timeout, retry);
        public NamespacesNamespaceSelfServiceModule NamespacesNamespaceSelfServiceModule => new NamespacesNamespaceSelfServiceModule(restClient, cancellationToken, timeout, retry);
        public NamespacesNamespaceTemplatesModule NamespacesNamespaceTemplatesModule => new NamespacesNamespaceTemplatesModule(restClient, cancellationToken, timeout, retry);
        public NetworkModule NetworkModule => new NetworkModule(restClient, cancellationToken, timeout, retry);
        public OvfExportFlagModule OvfExportFlagModule => new OvfExportFlagModule(restClient, cancellationToken, timeout, retry);
        public OvfImportFlagModule OvfImportFlagModule => new OvfImportFlagModule(restClient, cancellationToken, timeout, retry);
        public OvfLibraryItemModule OvfLibraryItemModule => new OvfLibraryItemModule(restClient, cancellationToken, timeout, retry);
        public ResourcePoolModule ResourcePoolModule => new ResourcePoolModule(restClient, cancellationToken, timeout, retry);
        public ServicesServiceModule ServicesServiceModule => new ServicesServiceModule(restClient, cancellationToken, timeout, retry);
        public StoragePoliciesModule StoragePoliciesModule => new StoragePoliciesModule(restClient, cancellationToken, timeout, retry);
        public StoragePoliciesComplianceVMModule StoragePoliciesComplianceVMModule => new StoragePoliciesComplianceVMModule(restClient, cancellationToken, timeout, retry);
        public StoragePoliciesComplianceModule StoragePoliciesComplianceModule => new StoragePoliciesComplianceModule(restClient, cancellationToken, timeout, retry);
        public StoragePoliciesVMModule StoragePoliciesVMModule => new StoragePoliciesVMModule(restClient, cancellationToken, timeout, retry);
        public SystemConfigDeploymentTypeModule SystemConfigDeploymentTypeModule => new SystemConfigDeploymentTypeModule(restClient, cancellationToken, timeout, retry);
        public SystemConfigPscRegistrationModule SystemConfigPscRegistrationModule => new SystemConfigPscRegistrationModule(restClient, cancellationToken, timeout, retry);
        public TaggingAssociationsModule TaggingAssociationsModule => new TaggingAssociationsModule(restClient, cancellationToken, timeout, retry);
        public TopologyNodesModule TopologyNodesModule => new TopologyNodesModule(restClient, cancellationToken, timeout, retry);
        public TopologyReplicationStatusModule TopologyReplicationStatusModule => new TopologyReplicationStatusModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureAttestationServicesModule TrustedInfrastructureAttestationServicesModule => new TrustedInfrastructureAttestationServicesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureKmsServicesModule TrustedInfrastructureKmsServicesModule => new TrustedInfrastructureKmsServicesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructurePrincipalModule TrustedInfrastructurePrincipalModule => new TrustedInfrastructurePrincipalModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersModule TrustedInfrastructureTrustAuthorityClustersModule => new TrustedInfrastructureTrustAuthorityClustersModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesModule TrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesModule => new TrustedInfrastructureTrustAuthorityClustersAttestationOsEsxBaseImagesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersAttestationServiceStatusModule TrustedInfrastructureTrustAuthorityClustersAttestationServiceStatusModule => new TrustedInfrastructureTrustAuthorityClustersAttestationServiceStatusModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesModule TrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesModule => new TrustedInfrastructureTrustAuthorityClustersAttestationTpm2CaCertificatesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysModule TrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysModule => new TrustedInfrastructureTrustAuthorityClustersAttestationTpm2EndorsementKeysModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsModule TrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsModule => new TrustedInfrastructureTrustAuthorityClustersAttestationTpm2SettingsModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsModule TrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsModule => new TrustedInfrastructureTrustAuthorityClustersConsumerPrincipalsModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateCsrModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateCsrModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateCsrModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersClientCertificateModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersCredentialModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersCredentialModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersCredentialModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersCurrentPeerCertificatesModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersCurrentPeerCertificatesModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersCurrentPeerCertificatesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersTrustedPeerCertificatesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsProvidersModule TrustedInfrastructureTrustAuthorityClustersKmsProvidersModule => new TrustedInfrastructureTrustAuthorityClustersKmsProvidersModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityClustersKmsServiceStatusModule TrustedInfrastructureTrustAuthorityClustersKmsServiceStatusModule => new TrustedInfrastructureTrustAuthorityClustersKmsServiceStatusModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityHostsAttestationModule TrustedInfrastructureTrustAuthorityHostsAttestationModule => new TrustedInfrastructureTrustAuthorityHostsAttestationModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustAuthorityHostsKmsModule TrustedInfrastructureTrustAuthorityHostsKmsModule => new TrustedInfrastructureTrustAuthorityHostsKmsModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigModule TrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigModule => new TrustedInfrastructureTrustedClustersAttestationServicesAppliedConfigModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustedClustersAttestationServicesModule TrustedInfrastructureTrustedClustersAttestationServicesModule => new TrustedInfrastructureTrustedClustersAttestationServicesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustedClustersKmsServicesAppliedConfigModule TrustedInfrastructureTrustedClustersKmsServicesAppliedConfigModule => new TrustedInfrastructureTrustedClustersKmsServicesAppliedConfigModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustedClustersKmsServicesModule TrustedInfrastructureTrustedClustersKmsServicesModule => new TrustedInfrastructureTrustedClustersKmsServicesModule(restClient, cancellationToken, timeout, retry);
        public TrustedInfrastructureTrustedClustersServicesAppliedConfigModule TrustedInfrastructureTrustedClustersServicesAppliedConfigModule => new TrustedInfrastructureTrustedClustersServicesAppliedConfigModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterActiveModule VchaClusterActiveModule => new VchaClusterActiveModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterDeploymentTypeModule VchaClusterDeploymentTypeModule => new VchaClusterDeploymentTypeModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterModeModule VchaClusterModeModule => new VchaClusterModeModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterPassiveModule VchaClusterPassiveModule => new VchaClusterPassiveModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterWitnessModule VchaClusterWitnessModule => new VchaClusterWitnessModule(restClient, cancellationToken, timeout, retry);
        public VchaClusterModule VchaClusterModule => new VchaClusterModule(restClient, cancellationToken, timeout, retry);
        public VchaOperationsModule VchaOperationsModule => new VchaOperationsModule(restClient, cancellationToken, timeout, retry);
        public VMModule VMModule => new VMModule(restClient, cancellationToken, timeout, retry);
        public VmTemplateLibraryItemsModule VmTemplateLibraryItemsModule => new VmTemplateLibraryItemsModule(restClient, cancellationToken, timeout, retry);
        public VmTemplateLibraryItemsCheckOutsModule VmTemplateLibraryItemsCheckOutsModule => new VmTemplateLibraryItemsCheckOutsModule(restClient, cancellationToken, timeout, retry);
        public VmTemplateLibraryItemsVersionsModule VmTemplateLibraryItemsVersionsModule => new VmTemplateLibraryItemsVersionsModule(restClient, cancellationToken, timeout, retry);
        public VmComputePoliciesModule VmComputePoliciesModule => new VmComputePoliciesModule(restClient, cancellationToken, timeout, retry);
        public VmConsoleTicketsModule VmConsoleTicketsModule => new VmConsoleTicketsModule(restClient, cancellationToken, timeout, retry);
        public VmGuestCustomizationModule VmGuestCustomizationModule => new VmGuestCustomizationModule(restClient, cancellationToken, timeout, retry);
        public VmGuestEnvironmentModule VmGuestEnvironmentModule => new VmGuestEnvironmentModule(restClient, cancellationToken, timeout, retry);
        public VmGuestFilesystemDirectoriesModule VmGuestFilesystemDirectoriesModule => new VmGuestFilesystemDirectoriesModule(restClient, cancellationToken, timeout, retry);
        public VmGuestFilesystemFilesModule VmGuestFilesystemFilesModule => new VmGuestFilesystemFilesModule(restClient, cancellationToken, timeout, retry);
        public VmGuestFilesystemTransfersModule VmGuestFilesystemTransfersModule => new VmGuestFilesystemTransfersModule(restClient, cancellationToken, timeout, retry);
        public VmGuestIdentityModule VmGuestIdentityModule => new VmGuestIdentityModule(restClient, cancellationToken, timeout, retry);
        public VmGuestLocalFilesystemModule VmGuestLocalFilesystemModule => new VmGuestLocalFilesystemModule(restClient, cancellationToken, timeout, retry);
        public VmGuestNetworkingModule VmGuestNetworkingModule => new VmGuestNetworkingModule(restClient, cancellationToken, timeout, retry);
        public VmGuestNetworkingInterfacesModule VmGuestNetworkingInterfacesModule => new VmGuestNetworkingInterfacesModule(restClient, cancellationToken, timeout, retry);
        public VmGuestNetworkingRoutesModule VmGuestNetworkingRoutesModule => new VmGuestNetworkingRoutesModule(restClient, cancellationToken, timeout, retry);
        public VmGuestOperationsModule VmGuestOperationsModule => new VmGuestOperationsModule(restClient, cancellationToken, timeout, retry);
        public VmGuestPowerModule VmGuestPowerModule => new VmGuestPowerModule(restClient, cancellationToken, timeout, retry);
        public VmGuestProcessesModule VmGuestProcessesModule => new VmGuestProcessesModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareModule VmHardwareModule => new VmHardwareModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareAdapterNvmeModule VmHardwareAdapterNvmeModule => new VmHardwareAdapterNvmeModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareAdapterSataModule VmHardwareAdapterSataModule => new VmHardwareAdapterSataModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareAdapterScsiModule VmHardwareAdapterScsiModule => new VmHardwareAdapterScsiModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareBootModule VmHardwareBootModule => new VmHardwareBootModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareBootDeviceModule VmHardwareBootDeviceModule => new VmHardwareBootDeviceModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareCdromModule VmHardwareCdromModule => new VmHardwareCdromModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareCpuModule VmHardwareCpuModule => new VmHardwareCpuModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareDiskModule VmHardwareDiskModule => new VmHardwareDiskModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareEthernetModule VmHardwareEthernetModule => new VmHardwareEthernetModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareFloppyModule VmHardwareFloppyModule => new VmHardwareFloppyModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareMemoryModule VmHardwareMemoryModule => new VmHardwareMemoryModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareParallelModule VmHardwareParallelModule => new VmHardwareParallelModule(restClient, cancellationToken, timeout, retry);
        public VmHardwareSerialModule VmHardwareSerialModule => new VmHardwareSerialModule(restClient, cancellationToken, timeout, retry);
        public VmLibraryItemModule VmLibraryItemModule => new VmLibraryItemModule(restClient, cancellationToken, timeout, retry);
        public VmPowerModule VmPowerModule => new VmPowerModule(restClient, cancellationToken, timeout, retry);
        public VmStoragePolicyModule VmStoragePolicyModule => new VmStoragePolicyModule(restClient, cancellationToken, timeout, retry);
        public VmStoragePolicyComplianceModule VmStoragePolicyComplianceModule => new VmStoragePolicyComplianceModule(restClient, cancellationToken, timeout, retry);
        public VmToolsModule VmToolsModule => new VmToolsModule(restClient, cancellationToken, timeout, retry);
        public VmToolsInstallerModule VmToolsInstallerModule => new VmToolsInstallerModule(restClient, cancellationToken, timeout, retry);
        public HvcLinksModule HvcLinksModule => new HvcLinksModule(restClient, cancellationToken, timeout, retry);
        public HvcLinksSyncProvidersModule HvcLinksSyncProvidersModule => new HvcLinksSyncProvidersModule(restClient, cancellationToken, timeout, retry);
        public HvcLinksSyncModule HvcLinksSyncModule => new HvcLinksSyncModule(restClient, cancellationToken, timeout, retry);
        public HvcManagementAdministratorsModule HvcManagementAdministratorsModule => new HvcManagementAdministratorsModule(restClient, cancellationToken, timeout, retry);
        public TokenserviceTokenExchangeModule TokenserviceTokenExchangeModule => new TokenserviceTokenExchangeModule(restClient, cancellationToken, timeout, retry);
    }
}